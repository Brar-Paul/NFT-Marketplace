[{"/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/index.js":"1","/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/serviceWorker.js":"2","/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/App.js":"3","/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/Navbar.js":"4","/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/Home.js":"5","/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/Create.js":"6","/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/MyPurchases.js":"7","/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/MyListedItems.js":"8"},{"size":493,"mtime":1647448782347,"results":"9","hashOfConfig":"10"},{"size":4951,"mtime":1647448782347,"results":"11","hashOfConfig":"10"},{"size":2952,"mtime":1647468018910,"results":"12","hashOfConfig":"10"},{"size":1925,"mtime":1647465892304,"results":"13","hashOfConfig":"10"},{"size":3440,"mtime":1647468058144,"results":"14","hashOfConfig":"10"},{"size":3256,"mtime":1647468133203,"results":"15","hashOfConfig":"10"},{"size":2723,"mtime":1647468236499,"results":"16","hashOfConfig":"10"},{"size":3680,"mtime":1647468933758,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dgm538",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/index.js",[],[],"/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/serviceWorker.js",[],[],"/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/App.js",[],[],["46","47"],"/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/Navbar.js",[],[],"/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/Home.js",["48"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card, Button } from 'react-bootstrap'\n\nconst Home = ({ marketplace, nft }) => {\n    const [loading, setLoading] = useState(true)\n    const [items, setItems] = useState([])\n    const loadMarketplaceItems = async () => {\n        // Load all unsold items\n        const itemCount = await marketplace.itemCount()\n        let items = []\n        for (let i = 1; i <= itemCount; i++) {\n            const item = await marketplace.items(i)\n            if (!item.sold) {\n                // get uri url from nft contract\n                const uri = await nft.tokenURI(item.tokenId)\n                // use uri to fetch the nft metadata stored on ipfs \n                const response = await fetch(uri)\n                const metadata = await response.json()\n                // get total price of item (item price + fee)\n                const totalPrice = await marketplace.getTotalPrice(item.itemId)\n                // Add item to items array\n                items.push({\n                    totalPrice,\n                    itemId: item.itemId,\n                    seller: item.seller,\n                    name: metadata.name,\n                    description: metadata.description,\n                    image: metadata.image\n                })\n            }\n        }\n        setLoading(false)\n        setItems(items)\n    }\n\n    const buyMarketItem = async (item) => {\n        await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n        loadMarketplaceItems()\n    }\n\n    useEffect(() => {\n        loadMarketplaceItems()\n    }, [])\n    if (loading) return (\n        <main style={{ padding: \"1rem 0\" }}>\n            <h2>Loading...</h2>\n        </main>\n    )\n    return (\n        <div className=\"flex justify-center\">\n            {items.length > 0 ?\n                <div className=\"px-5 container\">\n                    <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n                        {items.map((item, idx) => (\n                            <Col key={idx} className=\"overflow-hidden\">\n                                <Card>\n                                    <Card.Img variant=\"top\" src={item.image} />\n                                    <Card.Body color=\"secondary\">\n                                        <Card.Title>{item.name}</Card.Title>\n                                        <Card.Text>\n                                            {item.description}\n                                        </Card.Text>\n                                    </Card.Body>\n                                    <Card.Footer>\n                                        <div className='d-grid'>\n                                            <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\n                                                Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\n                                            </Button>\n                                        </div>\n                                    </Card.Footer>\n                                </Card>\n                            </Col>\n                        ))}\n                    </Row>\n                </div>\n                : (\n                    <main style={{ padding: \"1rem 0\" }}>\n                        <h2>No listed assets</h2>\n                    </main>\n                )}\n        </div>\n    );\n}\nexport default Home","/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/Create.js",[],[],"/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/MyPurchases.js",["49"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\n\nexport default function MyPurchases({ marketplace, nft, account }) {\n    const [loading, setLoading] = useState(true)\n    const [purchases, setPurchases] = useState([])\n    const loadPurchasedItems = async () => {\n        // Fetch purchased items from marketplace by quering Offered events with the buyer set as the user\n        const filter = marketplace.filters.Bought(null, null, null, null, null, account)\n        const results = await marketplace.queryFilter(filter)\n        //Fetch metadata of each nft and add that to listedItem object.\n        const purchases = await Promise.all(results.map(async i => {\n            // fetch arguments from each result\n            i = i.args\n            // get uri url from nft contract\n            const uri = await nft.tokenURI(i.tokenId)\n            // use uri to fetch the nft metadata stored on ipfs \n            const response = await fetch(uri)\n            const metadata = await response.json()\n            // get total price of item (item price + fee)\n            const totalPrice = await marketplace.getTotalPrice(i.itemId)\n            // define listed item object\n            let purchasedItem = {\n                totalPrice,\n                price: i.price,\n                itemId: i.itemId,\n                name: metadata.name,\n                description: metadata.description,\n                image: metadata.image\n            }\n            return purchasedItem\n        }))\n        setLoading(false)\n        setPurchases(purchases)\n    }\n    useEffect(() => {\n        loadPurchasedItems()\n    }, [])\n    if (loading) return (\n        <main style={{ padding: \"1rem 0\" }}>\n            <h2>Loading...</h2>\n        </main>\n    )\n    return (\n        <div className=\"flex justify-center\">\n            {purchases.length > 0 ?\n                <div className=\"px-5 container\">\n                    <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n                        {purchases.map((item, idx) => (\n                            <Col key={idx} className=\"overflow-hidden\">\n                                <Card>\n                                    <Card.Img variant=\"top\" src={item.image} />\n                                    <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                                </Card>\n                            </Col>\n                        ))}\n                    </Row>\n                </div>\n                : (\n                    <main style={{ padding: \"1rem 0\" }}>\n                        <h2>No purchases</h2>\n                    </main>\n                )}\n        </div>\n    );\n}","/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/MyListedItems.js",["50"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\n\nfunction renderSoldItems(items) {\n    return (\n        <>\n            <h2>Sold NFTs</h2>\n            <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n                {items.map((item, idx) => (\n                    <Col key={idx} className=\"overflow-hidden\">\n                        <Card>\n                            <Card.Img variant=\"top\" src={item.image} />\n                            <Card.Footer>\n                                For {ethers.utils.formatEther(item.totalPrice)} ETH - Recieved {ethers.utils.formatEther(item.price)} ETH\n                            </Card.Footer>\n                        </Card>\n                    </Col>\n                ))}\n            </Row>\n        </>\n    )\n}\n\nexport default function MyListedItems({ marketplace, nft, account }) {\n    const [loading, setLoading] = useState(true)\n    const [listedItems, setListedItems] = useState([])\n    const [soldItems, setSoldItems] = useState([])\n    const loadListedItems = async () => {\n        // Load all sold items that the user listed\n        const itemCount = await marketplace.itemCount()\n        let listedItems = []\n        let soldItems = []\n        for (let indx = 1; indx <= itemCount; indx++) {\n            const i = await marketplace.items(indx)\n            if (i.seller.toLowerCase() === account) {\n                // get uri url from nft contract\n                const uri = await nft.tokenURI(i.tokenId)\n                // use uri to fetch the nft metadata stored on ipfs \n                const response = await fetch(uri)\n                const metadata = await response.json()\n                // get total price of item (item price + fee)\n                const totalPrice = await marketplace.getTotalPrice(i.itemId)\n                // define listed item object\n                let item = {\n                    totalPrice,\n                    price: i.price,\n                    itemId: i.itemId,\n                    name: metadata.name,\n                    description: metadata.description,\n                    image: metadata.image\n                }\n                listedItems.push(item)\n                // Add listed item to sold items array if sold\n                if (i.sold) soldItems.push(item)\n            }\n        }\n        setLoading(false)\n        setListedItems(listedItems)\n        setSoldItems(soldItems)\n    }\n    useEffect(() => {\n        loadListedItems()\n    }, [])\n    if (loading) return (\n        <main style={{ padding: \"1rem 0\" }}>\n            <h2>Loading...</h2>\n        </main>\n    )\n    return (\n        <div className=\"flex justify-center\">\n            {listedItems.length > 0 ?\n                <div className=\"px-5 py-3 container\">\n                    <h2>Listed NFTs</h2>\n                    <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n                        {listedItems.map((item, idx) => (\n                            <Col key={idx} className=\"overflow-hidden\">\n                                <Card>\n                                    <Card.Img variant=\"top\" src={item.image} />\n                                    <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                                </Card>\n                            </Col>\n                        ))}\n                    </Row>\n                    {soldItems.length > 0 && renderSoldItems(soldItems)}\n                </div>\n                : (\n                    <main style={{ padding: \"1rem 0\" }}>\n                        <h2>No listed assets</h2>\n                    </main>\n                )}\n        </div>\n    );\n}",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":44,"column":8,"nodeType":"57","endLine":44,"endColumn":10,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":39,"column":8,"nodeType":"57","endLine":39,"endColumn":10,"suggestions":"60"},{"ruleId":"55","severity":1,"message":"61","line":64,"column":8,"nodeType":"57","endLine":64,"endColumn":10,"suggestions":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadMarketplaceItems'. Either include it or remove the dependency array.","ArrayExpression",["65"],"React Hook useEffect has a missing dependency: 'loadPurchasedItems'. Either include it or remove the dependency array.",["66"],"React Hook useEffect has a missing dependency: 'loadListedItems'. Either include it or remove the dependency array.",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [loadMarketplaceItems]",{"range":"74","text":"75"},"Update the dependencies array to be: [loadPurchasedItems]",{"range":"76","text":"77"},"Update the dependencies array to be: [loadListedItems]",{"range":"78","text":"79"},[1642,1644],"[loadMarketplaceItems]",[1678,1680],"[loadPurchasedItems]",[2508,2510],"[loadListedItems]"]