{"ast":null,"code":"var _jsxFileName = \"/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState([true]);\n\n  const loadMarketplaceItems = async () => {\n    const itemCount = await marketplace.itemCount();\n    let items = [];\n\n    for (let i = 1; i <= itemCount; i++) {\n      const item = await marketplace.items(i);\n\n      if (!item.sold) {\n        const uri = await nft.tokenURI(item.tokenId); // use uri to fetch nft metadata from ipfs\n\n        const response = await fetch(uri);\n        const metadata = await response.json();\n        const totalPrice = await marketplace.getTotalPrice(item.itemId); // Push new item to items array\n\n        items.push({\n          totalPrice,\n          itemId: item.itemId,\n          seller: item.seller,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        });\n      }\n    }\n\n    setItems(items);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify center\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"i/rE9B6s2ofv2DxebZHPv1nTZiw=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/PaulBrar/Solidity/NFT-Marketplace/NFT_Marketplace/src/frontend/components/Home.js"],"names":["useState","useEffect","ethers","Row","Col","Card","Button","Home","marketplace","nft","items","setItems","loading","setLoading","loadMarketplaceItems","itemCount","i","item","sold","uri","tokenURI","tokenId","response","fetch","metadata","json","totalPrice","getTotalPrice","itemId","push","seller","name","description","image"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,MAAzB,QAAuC,iBAAvC;;;AAEA,MAAMC,IAAI,GAAG,QAA0B;AAAA;;AAAA,MAAzB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAyB;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,CAAC,IAAD,CAAD,CAAtC;;AACA,QAAMc,oBAAoB,GAAG,YAAY;AACrC,UAAMC,SAAS,GAAG,MAAMP,WAAW,CAACO,SAAZ,EAAxB;AACA,QAAIL,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAID,SAArB,EAAgCC,CAAC,EAAjC,EAAqC;AACjC,YAAMC,IAAI,GAAG,MAAMT,WAAW,CAACE,KAAZ,CAAkBM,CAAlB,CAAnB;;AACA,UAAI,CAACC,IAAI,CAACC,IAAV,EAAgB;AACZ,cAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,QAAJ,CAAaH,IAAI,CAACI,OAAlB,CAAlB,CADY,CAEZ;;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAA5B;AACA,cAAMK,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACA,cAAMC,UAAU,GAAG,MAAMlB,WAAW,CAACmB,aAAZ,CAA0BV,IAAI,CAACW,MAA/B,CAAzB,CALY,CAMZ;;AACAlB,QAAAA,KAAK,CAACmB,IAAN,CAAW;AACPH,UAAAA,UADO;AAEPE,UAAAA,MAAM,EAAEX,IAAI,CAACW,MAFN;AAGPE,UAAAA,MAAM,EAAEb,IAAI,CAACa,MAHN;AAIPC,UAAAA,IAAI,EAAEP,QAAQ,CAACO,IAJR;AAKPC,UAAAA,WAAW,EAAER,QAAQ,CAACQ,WALf;AAMPC,UAAAA,KAAK,EAAET,QAAQ,CAACS;AANT,SAAX;AAQH;AACJ;;AACDtB,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,GAvBD;;AAyBA,sBACI;AAAK,IAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA/BD;;GAAMH,I;;KAAAA,I;AAiCN,eAAeA,IAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { Row, Col, Card, Button } from 'react-bootstrap'\n\nconst Home = ({ marketplace, nft }) => {\n    const [items, setItems] = useState([])\n    const [loading, setLoading] = useState([true])\n    const loadMarketplaceItems = async () => {\n        const itemCount = await marketplace.itemCount()\n        let items = []\n        for (let i = 1; i <= itemCount; i++) {\n            const item = await marketplace.items(i)\n            if (!item.sold) {\n                const uri = await nft.tokenURI(item.tokenId)\n                // use uri to fetch nft metadata from ipfs\n                const response = await fetch(uri)\n                const metadata = await response.json()\n                const totalPrice = await marketplace.getTotalPrice(item.itemId)\n                // Push new item to items array\n                items.push({\n                    totalPrice,\n                    itemId: item.itemId,\n                    seller: item.seller,\n                    name: metadata.name,\n                    description: metadata.description,\n                    image: metadata.image\n                })\n            }\n        }\n        setItems(items)\n    }\n\n    return (\n        <div className=\"flex justify center\"></div>\n    );\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}